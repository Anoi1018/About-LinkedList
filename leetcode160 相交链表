编写一个程序，找到两个单链表相交的起始节点。

注意：
如果两个链表没有交点，返回 null.
在返回结果后，两个链表仍须保持原有的结构。
可假定整个链表结构中没有循环。
程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。

输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
输出：Reference of the node with value = 2
输入解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点

代码示意：
一、标记法：时间复杂度O（n） 空间复杂度O（n）
var getIntersectionNode = function(headA, headB) {
    if(headA === null || headB===null) return null;
    while(headA){
         headA.flag = 1;
         headA = headA.next;
    }
    while(headB){
        if(headB.flag) return headB;
        headB = headB.next;
    }
    return null;
};
二、双指针法：时间复杂度：O（n） 空间复杂度（1）
var getIntersectionNode = function(headA, headB) {
    if(headA === null || headB===null) return null;
   
    let p1 = headA,p2 = headB;
    if(headA === headB) return headA; //
    while(p1.next || p2.next){//循环退出条件
        p1 = p1.next === null? headB:p1.next;
        p2 = p2.next === null? headA:p2.next;
        if(p1 === p2) return p1; //注意先走再判断
    }
    return null;
};
